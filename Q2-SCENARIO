1) what are different artifacts you need to create - name of the artifacts and its purpose

Ans: Not getting this questions properly . hope its refering the build artifacts from the Azure Devops.

Build artifacts - basically contains our compilated code in jar/war/ear for java project or .net project its in list of the directories in the publish.




2) List the tools you will to create and store the terraform templates. 

Ans: step1) create the directory structure for different env like DEV, QA and UAT and PROD
 
     step2) create the sub directory structure under the env dir for each resource like for virtual machine, vnet, ip , storage and NSG like any other resource components
     
     step3) under each sub directory of the resource which will create like virtuanlet.tf(which is having the complete information about the infrastrucure of virtualnetwork)
     
            main.tf(main terraform configurations file which terraform version and providers) , var.tf(contains all the variable information)
            
     step4) all these directory terraform templtes are stored in any private git hub repository / azure repo or we can store it in the azure storage account / storage containers







3) Explain the process and steps to create automated deployment pipeline. 

>>>>> Defining the terraform file Iac in our source code - Azure Git repo 

step1) Go to the organization under that the project from the Azure Devops 

step2) Select Repos. Switch to terraform branch. Make sure that you are now on the terraform branch and Terraform folder is there in the repo.

step3) Select the webapp.tf file under the Terraform folder. Go through the code. webapp.tf is a terraform configuration file. Terraform uses its own file format, called HCL (Hashicorp Configuration Language). This is very similar to YAML.

>>>>>Build your application using Azure CI Pipeline

step1) Navigate to Pipelines –> Pipelines. Select Terraform-CI and click Edit.

step2) is CI pipeline has tasks to compile .Net Core project. The dotnet tasks in the pipeline will restore dependencies, build, test and publish the build output into a zip file (package) which can be deployed to a web application

step3) In addition to the application build, we need to publish terraform files to build artifacts so that it will be available in CD pipeline. So we have added Copy files task to copy Terraform file to Artifacts directory.

step4) Now click Queue to trigger the build. Once the build succeeds, verify that the artifacts have Terraform folder and PartsUnlimitedwebsite.zip file in the drop.

>>>>>Deploy resources using Terraform (IaC) in Azure CD pipeline

step1) Navigate to Pipelines –> Releases. Select Terraform-CD and click Edit.

step2) Select Dev stage and click View stage tasks to view the pipeline tasks.

step3) Select the Azure CLI task. Select the Azure subscription from the drop-down list and click Authorize to configure Azure service connection.

step4) Select the Azure PowerShell task. Select Azure service connection from the drop-down. To configure the Terraform backend we need Storage account access key. Here we are using Azure PowerShell task to get the Access key of the storage account provisioned in the previous step.

step5) Select the Replace tokens task.

step6) Terraform tool installer task is used to install a specified version of Terraform from the Internet or the tools cache and prepends it to the PATH of the Azure Pipelines Agent (hosted or private).

step7) When running Terraform in automation, the focus is usually on the core plan/apply cycle

step8) Select the Terraform init task. Select Azure service connection from the drop-down. And make sure to enter the container name as terraform 
     
	  This task runs terraform init command. The terraform init command looks through all of the *.tf files in the current working directory and automatically downloads any of the providers required for them. In this example, it will download Azure provider as we are going to deploy Azure resources.
	  
step9) Select the Terraform plan task. Select Azure service connection from the drop-down.
 
      The terraform plan command is used to create an execution plan. Terraform determines what actions are necessary to achieve the desired state specified in the configuration files

step10) Select the Terraform Apply task. Select Azure service connection from the drop-down.
 
     This task will run the terraform apply command to deploy the resources. By default, it will also prompt for confirmation that you want to apply those changes.
	 
step11) Select Azure App Service Deploy task. Select Azure service connection from the drop-down.

	This task will deploy the PartsUnlimited package to Azure app service
	
step12) Once you are done Save the changes and Create a release.








4) Create a sample Terraform template you will use to deploy below services: vnet, 2 subnet, NSG to open port 80 and 443, 1 windows VM in each subnet and 1 storage account 

Ans: 

resource "azurerm_resource_group" "devops_rg" {
  name     = "devops-resources"
  location = "West Europe"
}

resource "azurerm_virtual_network" "devops_vnet" {
  name                = "devops-network"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name
}

resource "azurerm_subnet" "devops_subnet" {
  name                 = "internal"
  resource_group_name  = azurerm_resource_group.example.name
  virtual_network_name = azurerm_virtual_network.example.name
  address_prefixes     = ["10.0.2.0/24"]
 
}

resource "azurerm_subnet" "devops_subnet2" {
  name                 = "internal2"
  resource_group_name  = azurerm_resource_group.example.name
  virtual_network_name = azurerm_virtual_network.example.name
  address_prefixes     = ["10.0.3.0/24"]
}

resource "azurerm_network_interface" "devops_nic" {
  name                = "devops-nic"
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.example.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_windows_virtual_machine" "devops_vm" {
  name                = "devops-machine"
  resource_group_name = azurerm_resource_group.example.name
  location            = azurerm_resource_group.example.location
  size                = "Standard_F2"
  admin_username      = "adminuser"
  admin_password      = "P@$$w0rd1234!"
  network_interface_ids = [
    azurerm_network_interface.example.id,
  ]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2016-Datacenter"
    version   = "latest"
  }
}


resource "azurerm_storage_account" "devops_storage" {
  name                     = "storageaccountname"
  resource_group_name      = azurerm_resource_group.example.name
  location                 = azurerm_resource_group.example.location
  account_tier             = "Standard"
  account_replication_type = "GRS"

  tags = {
    environment = "staging"
  }
}tags


resource "azurerm_network_security_rule" "devops_nsg" {
  name                        = "test123"
  priority                    = 100
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "80"
  source_address_prefix       = "*"
  destination_address_prefix  = "*"
  resource_group_name         = azurerm_resource_group.example.name
  network_security_group_name = azurerm_network_security_group.example.name
}





5) Explain how will you access the password stored in key vault and use it as Admin password in the VM terraform template 

below steps in managing the azure key vault with the terraform template.

Step1) Inside the keyvault folder, create the variables.tf file to store variables used by the module:

Step2) Then, create the main.tf to create the Azure Key Vault and policies, inside the keyvault folder

Step3) Finally, we create the ouput.tf file in the same folder used to return the values of the Terraform module


we can use/access the key vault module the below steps

Step1) Create the variables.tf file to store variables used by the module in the root folder. I use variables in a separate variables.tf file for readability, however, you can use variables directly in the main.tf code.

Step2) Here is the code to call the module in the main.tf file of the root folder. We will pass the Resource Group, location and other parameters to the module.

Step3) Also, we created two Key Vault policies, one full for administrators and one read for applications. The settings of these policies can be modified from the variables.tf file.

Step4) Finally, we define the content variables in the terraform.tfvars file. We will pass the object ID of a user, service principal or security group for FULL and READ access using kv-full-object-id and kv-read-object-id variables and the secrets using a map object.



