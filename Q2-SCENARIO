1) what are different artifacts you need to create - name of the artifacts and its purpose



2) List the tools you will to create and store the terraform templates. 




3) Explain the process and steps to create automated deployment pipeline. 






4) Create a sample Terraform template you will use to deploy below services:

vnet, 2 subnet, NSG to open port 80 and 443, 1 windows VM in each subnet and 1 storage account 


resource "azurerm_resource_group" "devops" {
  name     = "devops-resources"
  location = "West Europe"
}

resource "azurerm_virtual_network" "devops" {
  name                = "devops-network"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name
}

resource "azurerm_subnet" "devops" {
  name                 = "internal"
  resource_group_name  = azurerm_resource_group.example.name
  virtual_network_name = azurerm_virtual_network.example.name
  address_prefixes     = ["10.0.2.0/24"]
}

resource "azurerm_network_interface" "devops" {
  name                = "devops-nic"
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.example.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_windows_virtual_machine" "devops" {
  name                = "devops-machine"
  resource_group_name = azurerm_resource_group.example.name
  location            = azurerm_resource_group.example.location
  size                = "Standard_F2"
  admin_username      = "adminuser"
  admin_password      = "P@$$w0rd1234!"
  network_interface_ids = [
    azurerm_network_interface.example.id,
  ]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2016-Datacenter"
    version   = "latest"
  }
}


resource "azurerm_storage_account" "devops" {
  name                     = "storageaccountname"
  resource_group_name      = azurerm_resource_group.example.name
  location                 = azurerm_resource_group.example.location
  account_tier             = "Standard"
  account_replication_type = "GRS"

  tags = {
    environment = "staging"
  }
}tags


resource "azurerm_network_security_rule" "devops" {
  name                        = "test123"
  priority                    = 100
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "80"
  source_address_prefix       = "*"
  destination_address_prefix  = "*"
  resource_group_name         = azurerm_resource_group.example.name
  network_security_group_name = azurerm_network_security_group.example.name
}





5) Explain how will you access the password stored in key vault and use it as Admin password in the VM terraform template 

below steps in managing the azure key vault with the terraform template.

Step1) Inside the keyvault folder, create the variables.tf file to store variables used by the module:

Step2) Then, create the main.tf to create the Azure Key Vault and policies, inside the keyvault folder

Step3) Finally, we create the ouput.tf file in the same folder used to return the values of the Terraform module


we can use/access the key vault module the below steps

Step1) Create the variables.tf file to store variables used by the module in the root folder. I use variables in a separate variables.tf file for readability, however, you can use variables directly in the main.tf code.

Step2) Here is the code to call the module in the main.tf file of the root folder. We will pass the Resource Group, location and other parameters to the module.

Step3) Also, we created two Key Vault policies, one full for administrators and one read for applications. The settings of these policies can be modified from the variables.tf file.

Step4) Finally, we define the content variables in the terraform.tfvars file. We will pass the object ID of a user, service principal or security group for FULL and READ access using kv-full-object-id and kv-read-object-id variables and the secrets using a map object.



